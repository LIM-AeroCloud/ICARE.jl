var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"-","title":"API","text":"","category":"section"},{"location":"api.html#ICARE.ICARE","page":"-","title":"ICARE.ICARE","text":"Module ICARE\n\nModule related to retrieving data from the AERIS/ICARE server (http://www.icare.univ-lille1.fr/). Currently, the only exported function is ftp_download to retrieve missing CALIOP data files in a specified time frame.\n\n\n\n\n\n","category":"module"},{"location":"api.html#ICARE.ConnectionError","page":"-","title":"ICARE.ConnectionError","text":"ConnectionError\n\nThrown with a message as parameter, when no connection to the server can be established.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ICARE.Counter","page":"-","title":"ICARE.Counter","text":"struct Counter\n\nStores a counter for downloads, conversions, and skipped data files as well as failed downloads. By default, all counter parts are initialised with zero, but can be adjusted by positional or individually by keyword arguments during instantiation.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ICARE.Counter-Tuple{}","page":"-","title":"ICARE.Counter","text":"Counter(;downloads::Int=0, conversions::Int=0, skipped::Int=0, failed::Int=0) -> Counter\n\nConstructor for Counter with default init values 0 for all sub-counters. Other values can be initialised with keyword arguments for the respective sub-counter.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.File","page":"-","title":"ICARE.File","text":"struct File\n\nStores relevant data about file name, extension, and paths on the local and remote system.\n\n\n\n\n\n","category":"type"},{"location":"api.html#ICARE.File-Tuple{SFTP.Client, OrderedCollections.OrderedDict, Dates.Date, String, Bool}","page":"-","title":"ICARE.File","text":"File(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    date::Date,\n    name::String,\n    convert::Bool\n) -> File\n\nConstructor for a File struct with fields for  the file name, extension, location (including target, download, and remote location) and directory (dst and src); location includes the file name, dir does not. The target extensions are based on the option to convert files to a new format.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.check_localroot!-Tuple{OrderedCollections.OrderedDict, AbstractString, AbstractString}","page":"-","title":"ICARE.check_localroot!","text":"check_localroot!(\n    inventory::OrderedDict,\n    root::AbstractString,\n    product::AbstractString\n)\n\nCheck, if the root has changed and update the root path and the path to the product main folder in the inventory.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.clear_dates!-Tuple{OrderedCollections.OrderedDict}","page":"-","title":"ICARE.clear_dates!","text":"clear_dates!(inventory::OrderedDict)\n\nClear all data for dates in the inventory, but save the converted file sizes in a temp entry.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.confirm-Tuple{Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.confirm","text":"confirm(clean::Bool, logger::Logging.ConsoleLogger) -> Bool\n\nConfirm to delete HDF4 files, if clean is set to true with terminal input and log events to logger. Return true, if clean is false, or clean is true and the user confirmed with \"yes\". Return false, if clean is true and user did not confirm with \"yes\".\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.convert!-Tuple{OrderedCollections.OrderedDict, ICARE.File, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.convert!","text":"convert!(\n    inventory::OrderedDict,\n    file::File,\n    convert::Bool,\n    logged::Logging.ConsoleLogger\n)\n\nConvert the file to a new file format as defined in the inventory unless file is already up-to-date or it was opted out to convert the file. Log events to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.convert_file","page":"-","title":"ICARE.convert_file","text":"convert_file(input::String, output::String[, convert::Bool])\n\nConvert the input to the output format unless convert is false (if provided). Both input and output can be absolute or relative paths.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.convert_hdffile!-Tuple{OrderedCollections.OrderedDict, String, String, String, Int8, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.convert_hdffile!","text":"convert_hdffile!(\n    inventory::OrderedDict,\n    file::String,\n    path::String,\n    root::String,\n    error_code::Int8,\n    clean::Bool,\n    logger::Logging.ConsoleLogger;\n    h4ext::String=\".hdf\",\n    h5ext::String=\".h5\"\n)\n\nConvert the file in the given path of the root directory from HDF4 to HDF5 standard (using h4ext and h5ext file extensions, respectively) and update the inventory by the file size of the new h5 file. Handle conversions and log events to logger based on the given error_code. Delete HDF4 after successful conversion, if clean is set to true.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.convert_hdffiles-Tuple{Vector{String}, Vector{String}, Base.CoreLogging.ConsoleLogger, IOStream}","page":"-","title":"ICARE.convert_hdffiles","text":"convert_hdffiles(\n    h4files::Vector{String},\n    h5files::Vector{String},\n    logger::Logging.ConsoleLogger,\n    logio::IOStream\n)\n\nConvert h4files to h5files and log successful conversions to logger. Successes are immediately flushed to logio to always have an up-to-date\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.convertdates-Tuple{Int64, Int64}","page":"-","title":"ICARE.convertdates","text":"convertdates(startdate::Int, enddate::Int) -> startdate::Date, enddate::Date\n\nConvert startdate and enddate from Int to Date. If the day and/or month in startdate are missing, startdate is completed with the earliest possible date (day = 01 and month = 01). If the day and/or month in enddate are missing, enddate is completed with the latest possible date (month = 12 and day = last day of that month).\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.converted!-Tuple{OrderedCollections.OrderedDict, ICARE.File, Bool}","page":"-","title":"ICARE.converted!","text":"converted!(inventory::OrderedDict, file::File, convert::Bool) -> Bool\n\nCheck, whether the size of the converted file is known in the inventory and matches the actual file size. Return also true, if it was opted out to convert the file.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.credentials-Tuple{String, String}","page":"-","title":"ICARE.credentials","text":"credentials(user::String, password::String) -> Bool\n\nReturn true, if the user name and password for the ICARE server are set, otherwise false. Credentials are not checked for validity, only that they are not empty.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.data_gaps!-Tuple{OrderedCollections.OrderedDict}","page":"-","title":"ICARE.data_gaps!","text":"data_gaps!(inventory::OrderedDict, dates::Vector{Date})\n\nAdd missing data gaps to the inventory from gaps in dates.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.display_gaps-Tuple{OrderedCollections.OrderedDict, @NamedTuple{start::Dates.Date, stop::Dates.Date}, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.display_gaps","text":"display_gaps(\n    inventory::OrderedDict,\n    daterange::@NamedTuple{start::Date,stop::Date},\n    logger::Logging.ConsoleLogger\n)\n\nLog data gaps in the inventory in the given daterange to logger. Combine single dates in the inventory metadata to date ranges.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.download-Tuple{SFTP.Client, OrderedCollections.OrderedDict, ICARE.File, Any}","page":"-","title":"ICARE.download","text":"download!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    file::File,\n    update\n)\n\nDownload the file from the icare server and update the inventory. Only download newer files on the server, if update is set to true.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.downloaded","page":"-","title":"ICARE.downloaded","text":"downloaded(\n    inventory::OrderedDict,\n    file::File,\n    update::Bool,\n    orig::Bool=false\n) -> Bool\n\nCheck, whether the file.target has already been downloaded from the server to the local directory by comparing it to the filestats of the remote server in the inventory. If update is set, downloaded returns false, if newer versions of the file exist on the server. When orig is set to true, downloaded checks against the downloaded instead of the target file.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.filter_years!-Tuple{OrderedCollections.OrderedDict, Vector{Int64}, @NamedTuple{start::Dates.Date, stop::Dates.Date}, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.filter_years!","text":"filter_years!(\n    inventory::OrderedDict,\n    years::Vector{Int},\n    daterange::@NamedTuple{start::Date,stop::Date},\n    resync::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nFilter years to keep only years within the daterange and outside the known date range of the inventory unless resync is set to true. In this case, empty dates and reset metadata. Log events to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.find_conflicts-Tuple{Vector{String}, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.find_conflicts","text":"find_conflicts(\n    h5files::Vector{String},\n    logger::Logging.ConsoleLogger\n) -> Vector{Int}\n\nSearch for existing h5files and return a vector of indices of the existing files in h5files.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.find_hdffiles-Tuple{String, Bool, Union{String, Vector{String}}, String}","page":"-","title":"ICARE.find_hdffiles","text":"find_hdffiles(\n    rootdir::String,\n    recursive::Bool,\n    ext::Union{String,Vector{String}},\n    h5ext::String\n) -> Tuple{Vector{String},Vector{String}}\n\nSearch for HDF4 files with the specified extension(s) in the rootdir and any subdirectories, if recursive is set to true.\n\nReturn vectors with the absolute paths and file names of the HDF4 files and the respective HDF5 counterparts exchanging the file extension to h5ext.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.h4cleanup-Tuple{Vector{String}, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.h4cleanup","text":"h4cleanup(h4files::Vector{String}, clean::Bool, logger::Logging.ConsoleLogger)\n\nDelete all h4files, if clean is set to true and log deletions to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.h5upgrade!","page":"-","title":"ICARE.h5upgrade!","text":"h5upgrade!(\n  inventory::OrderedDict,\n  date::Date,\n  h4file::String,\n  h5file::String=\"\";\n  force::Bool=false\n)\n\nUpgrade the h4file to h5file for the given date and add the size of the new HDF5 file to the inventory. Overwrite any existing h5file, if force is set to true.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.hdfupgrade","page":"-","title":"ICARE.hdfupgrade","text":"hdfupgrade(\n    product::String,\n    version::Float64 = 4.51;\n    localroot::String = \".\",\n    remoteroot::String = \"/SPACEBORNE/CALIOP\",\n    user::String = \"\",\n    password::String = \"\",\n    clean::Bool = false,\n    h4ext::String = \".hdf\",\n    h5ext::String = \".h5\",\n    logfile::String = \"conversions.log\",\n    loglevel::Symbol = :Debug\n)\n\nConvert all HDF4 data files to HDF5 files (with h4ext/h5ext file extensions, respectively) that are part of specified product in the given version.\n\nTo check, whether hdf files are part of the product, the are compared to the inventory file in the product folder in the localroot. Additional checks against the ICARE server can be performed with a significant increase in processing time, if the ICARE user name and password are given as well as the remoteroot of the product folder on the server.\n\nBy default, files are upgraded to HDF5 standard and original files are kept. If clean is set to true, the original files are deleted upon confirmation. This means that data files will have to be re-downloaded, if data files in the original HDF4 format are needed!\n\nEvents of the desired loglevel will be logged to logfile. A timestamp will be added to each logfile so that a unique logfile is created for every run and logfiles are not overwritten.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.icare_connect","page":"-","title":"ICARE.icare_connect","text":"icare_connect(\n    user::String,\n    password::String,\n    root::String,\n    product::String\n) -> SFTP.Client\n\nSecurely connect to the server with SFTP using the credentials user and password and changing to the product folder in the root directory.\n\nSeveral checks are performed about the connection and folder structure and a SFTP.Client type with all the relevant information about the server is returned.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.in_database-Tuple{OrderedCollections.OrderedDict, SFTP.Client, String, String, String, Vector{String}}","page":"-","title":"ICARE.in_database","text":"in_database(\n    inventory::OrderedDict,\n    icare::SFTP.Client,\n    root::String,\n    path::String,\n    file::String,\n    h5files::Vector{String}\n) -> Int8\n\nDetermine, whether the file in the given path of the root directory is part of the inventory. Check the icare server, if files for a given date are unavailable. Check against available h5files in the same folder for already converted files. Return an error code for possible events:\n\n-1: corrupt inventory (should not happen)\n0: file in database\n1: h5 already exists; conversion skipped\n2: existing h5 file/inventory need update\n3: not in local inventory\n4: file not on server\n5: no data reported for date (should already be caught elsewhere)\n6: date outside expected date range (should already be caught elsewhere)\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.init_logging-Tuple{String, String, Symbol}","page":"-","title":"ICARE.init_logging","text":"init_logging(logfile::String, rootdir::String, loglevel::Symbol) -> Tuple{String,Logging.LogLevel}\n\nAdd a timestamp to the logfile. If no path is given in the file name, save logfile to rootdir. Return the updated logfile and the loglevel as Logging.LogLevel.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.load_database-Tuple{String, String, String, String, String, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.load_database","text":"load_database(\n  productfolder::String,\n  localroot::String,\n  remoteroot::String,\n  user::String,\n  password::String,\n  logger::Logging.ConsoleLogger\n) -> Tuple{Union{SFTP.Client,Nothing},OrderedDict}\n\nLoad the inventory in the given productfolder of the localroot. Additionally, access ICARE server data, if the user name, password, and remoteroot are given. One or the other must be given or an IOError will be thrown. All events are logged to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.load_inventory!-Tuple{OrderedCollections.OrderedDict, AbstractString}","page":"-","title":"ICARE.load_inventory!","text":"load_inventory!(inventory::OrderedDict, file::AbstractString)\n\nLoad data from a yaml file to the inventory.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.log_counter-Tuple{ICARE.Counter, Base.CoreLogging.ConsoleLogger, IO, Dates.DateTime}","page":"-","title":"ICARE.log_counter","text":"log_counter(counter::Counter, logger::Logging.ConsoleLogger, t0::DateTime)\n\nLog the number of downloaded, skipped, and converted files saved in counter to logger together with the time it took since t0.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.new_date!-Tuple{OrderedCollections.OrderedDict, Dates.Date}","page":"-","title":"ICARE.new_date!","text":"new_date!(inventory::OrderedDict, date::Date) -> Bool\n\nAdd the given date to the inventory, if missing. Return true, if the date was added, otherwise false.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.new_inventory!-Tuple{SFTP.Client, OrderedCollections.OrderedDict, String, String, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.new_inventory!","text":"new_inventory!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    root::String,\n    product::String,\n    convert::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nInitialise a new and empty inventory.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.newext","page":"-","title":"ICARE.newext","text":"newext([inventory::OrderedDict, convert::Bool]) -> String\n\nReturn the extension of the converted file format or the original file extension from the inventory, when convert is false (no conversion). If no arguments are provided, return the default extension of the converted file format.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.newext!-Tuple{OrderedCollections.OrderedDict, Bool}","page":"-","title":"ICARE.newext!","text":"newext!(inventory::OrderedDict, convert::Bool)\n\nCheck and update the converted file extension in the inventory. If convert is false, the target extension is set to the original file extension.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.product_database!-Tuple{SFTP.Client, OrderedCollections.OrderedDict, String, String, @NamedTuple{start::Dates.Date, stop::Dates.Date}, Bool, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.product_database!","text":"product_database!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    root::String,\n    product::String,\n    daterange::@NamedTuple{start::Date,stop::Date},\n    convert::Bool,\n    resync::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nInitiate the inventory of icare server-side data files for the product in the remoteroot directory. Either read the database from the yaml file in the product folder or initialise a new database. If the daterange of the selected dates is (partly) outside the inventory date range, the inventory is updated for these extended periods. The whole inventory can be updated by setting resync to true. Additional checks are performed, whether the root folder was moved. In that case, the inventory is updated and a warning is issued. The target file extension for converted files is set based on the convert option. Updates are logged to the screen and the log file with logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.remotefiles!-Tuple{SFTP.Client, OrderedCollections.OrderedDict, Dates.Date}","page":"-","title":"ICARE.remotefiles!","text":"remotefiles!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    date::Date\n) -> Bool\n\nAdd file stats for all granules of the date based on the icare server data. File stats are only added for dates with no file data. Indicate updates in the inventory by the returned Bool.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.rmh4-Tuple{String, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.rmh4","text":"rmh4(\n    file::String,\n    clean::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nDelete the HDF4 file, if clean is set to true and log the event to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.save_inventory-Tuple{OrderedCollections.OrderedDict, Dates.DateTime}","page":"-","title":"ICARE.save_inventory","text":"save_inventory(inventory::OrderedDict, t::DateTime)\n\nSave the inventory to <product path>/.inventory.yaml if changes occurred since time t.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.set_converted_size!-Tuple{OrderedCollections.OrderedDict, ICARE.File, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.set_converted_size!","text":"set_converted_size!(\n    inventory::OrderedDict,\n    file::File,\n    convert::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nSet the size of the converted file in the inventory and mark the inventory as updated. Log events to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.set_localroot-Tuple{String, String}","page":"-","title":"ICARE.set_localroot","text":"set_localroot(localroot::String, mainfolder::String) -> String\n\nDefine the product folder on the local system from the localroot and the mainfolder containing all the year folders for the ICARE data.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.setup_conversion!-Tuple{Vector{String}, Vector{String}, Vector{Int64}, Symbol, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.setup_conversion!","text":"setup_conversion!(\n    h4files::Vector{String},\n    h5files::Vector{String},\n    h5::Vector{Int},\n    h5exists::Symbol,\n    logger::Logging.ConsoleLogger\n) -> Vector{String}\n\nAdjust the list of existing h4files and target h5files using the indexes of existing h5 files based on the choices, if h5exists. Conversions with existing h5 files can either be skipped or cancelled on the first encounter (deleting the respective entries in h4files and h5files), overwritten or aborted (emptying the h5files vector). Choices and number of conversions are logged to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.sftp_download","page":"-","title":"ICARE.sftp_download","text":"sftp_download(\n    user::String,\n    password::String,\n    product::String,\n    startdate::Int,\n    enddate::Int=-1;\n    version::Union{Nothing,Real} = 4.51,\n    remoteroot::String = \"/SPACEBORNE/CALIOP/\",\n    localroot::String = \".\",\n    convert::Bool = true,\n    resync::Bool = false,\n    update::Bool = false,\n    logfile::String = \"downloads.log\",\n    loglevel::Symbol = :Debug\n\n)\n\nDownload satellite data from the Aeris/ICARE server.\n\nnote: Note\nTo use sftp_download, an Aeris/ICARE account is needed that is available for free for non-commercial use.\n\nPositional arguments\n\nuser::String/password::String: Aeris/ICARE account credentials\nproduct::String: The desired product to download (matches the folder name excluding the version number, e.g., 05kmCPro)\nstartdate::Int/enddate::Int: The start/end date for the download period as Int (format: yyyy[mm[dd]]);\n\nIn the dates, the day and month part can be omitted. In this case, the earliest possible start date is selected and the latest possible end date, e.g. 202003 will give a start date of 2020-03-01 and an end date of 2020-03-31. The end date is optional, if omitted, the period defined by startdate is downloaded, either a day, or a month (if the day part is omitted) or a year (if both day and month are omitted).\n\nKeyword arguments\n\nversion::Union{Nothing,Real}: The version number of the product (default: 4.51).\nremoteroot::String: The root path on the remote server (default: \"/SPACEBORNE/CALIOP/\").\nlocalroot::String: The root path on the local machine containing the product folder (default: \".\").\nconvert::Bool: Whether or not to convert the downloaded files to another file format (default: true).\nresync::Bool: Whether to re-synchronize the local inventory with the remote server (default: false).\nupdate::Bool: Whether to update the local files if newer versions are available on the remote server (default: false).\nlogfile::String: The name of the log file (default: \"downloads.log\"; the name will be appended by the current date and time).\nloglevel::Symbol: The log level for the download process (default: :Debug).\n\nwarning: Warning\nThe update option automatically resynchronises the inventory as well.Re-synchronisation of the inventory will take several minutes up to hours!\n\nFor custom version formats, the version can be set to nothing and included in the product string. By default, the product folder is constructed as <product>.v<X.XX> with the version as float with two decimal places independent of the input format.\n\nBy default, hdf files (version 4) are assumed as download source, which will be converted to .h5 (HDF5) file unless convert is set to false.\n\n\n\n\n\n","category":"function"},{"location":"api.html#ICARE.sync!-Tuple{SFTP.Client, OrderedCollections.OrderedDict, @NamedTuple{start::Dates.Date, stop::Dates.Date}, Bool, Bool, Bool, Base.CoreLogging.ConsoleLogger, IO, ICARE.Counter}","page":"-","title":"ICARE.sync!","text":"sync!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    daterange::@NamedTuple{start::Date, stop::Date},\n    convert::Bool,\n    update::Bool,\n    resync::Bool,\n    logger::Logging.ConsoleLogger,\n    logio::IO,\n    counter::Counter\n)\n\nSynchronize the files for the selected daterange from the icare server with the local system. If set, update and convert files to the latest version available on the server and a predefined file format. Dates and files are compared to the inventory and the inventory is updated, if necessary. Increase the respective counter for each sync action and log logger events to a log file in the logio I/O stream.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.sync_database!-Tuple{SFTP.Client, OrderedCollections.OrderedDict, Vector{Int64}, @NamedTuple{start::Dates.Date, stop::Dates.Date}, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.sync_database!","text":"sync_database!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    years::Vector{Int},\n    daterange::@NamedTuple{start::Date,stop::Date},\n    convert::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nSync the inventory with the icare server for the given daterange and years. Consider conversion to a new file format based on the convert option. Log events to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.update_stats!-Tuple{SFTP.Client, OrderedCollections.OrderedDict, ICARE.File, Bool, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.update_stats!","text":"update_stats!(\n    icare::SFTP.Client,\n    inventory::OrderedDict,\n    file::File,\n    resync::Bool,\n    logger::Logging.ConsoleLogger\n)\n\nUpdate the file stats in the inventory with the remote icare server. If the size of the converted file does not match the inventory, it is updated, too. Ignore already checked dates, if the inventory was already resynced. Reset data for files previously in the database, but currently not available on the server. Log events to logger.\n\n\n\n\n\n","category":"method"},{"location":"api.html#ICARE.valid_dir-Tuple{String, OrderedCollections.OrderedDict, Base.CoreLogging.ConsoleLogger}","page":"-","title":"ICARE.valid_dir","text":"valid_dir(\n    path::String,\n    inventory::OrderedDict,\n    logger::Logging.ConsoleLogger\n) -> Bool\n\nCheck that the path is a valid directory within the ICARE folder structure. Return true, if the folder meets the ICARE standard, false otherwise. Log events to logger (using inventory data if needed).\n\n\n\n\n\n","category":"method"},{"location":"release-notes.html#Release-Notes","page":"Release notes","title":"Release Notes","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"This project uses Semantic Versioning. The format of the release notes follows Keep a Changelog.","category":"page"},{"location":"release-notes.html#[UNRELEASED]","page":"Release notes","title":"[UNRELEASED]","text":"","category":"section"},{"location":"release-notes.html#Added","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Use a local .inventory.yaml to store stats of the server-side file structure in the root of the product folder and reduce communication with the server\nSupport of parallel downloads\nSupport of file format conversions with focus on HDF4 > HDF5\nAdd routines just for conversions of local downloads\nAdd Documenter documentation page and this CHANGELOG (release notes)\nAdd GitHub workflows for CI/CD","category":"page"},{"location":"release-notes.html#Changed","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Switched from FTP to SFTP protocol for downloads\nComplete refactoring of the code, simplify download and restart routines\nImproved logging\nReorganise downloads in a single loop\nConversion routines are now directly included in the code and not called as script with the run command; they may be overloaded with custom routines for other conversions","category":"page"},{"location":"release-notes.html#[v0.4.0](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.4.0)","page":"Release notes","title":"v0.4.0","text":"","category":"section"},{"location":"release-notes.html#Changed-2","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Use Int to define start/end dates or periods for downloads","category":"page"},{"location":"release-notes.html#[v0.3.3](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.3.3)","page":"Release notes","title":"v0.3.3","text":"","category":"section"},{"location":"release-notes.html#Added-2","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"New option to restart a download session by kwarg\nSet v1.0.0 as minimum requirement for Julia","category":"page"},{"location":"release-notes.html#Changed-3","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Better error handling","category":"page"},{"location":"release-notes.html#[v0.3.2](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.3.2)","page":"Release notes","title":"v0.3.2","text":"","category":"section"},{"location":"release-notes.html#Changed-4","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Update package dependencies\nInternal refactoring for changes in CSV.read","category":"page"},{"location":"release-notes.html#[v0.3.1](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.3.1)","page":"Release notes","title":"v0.3.1","text":"","category":"section"},{"location":"release-notes.html#Added-3","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Checks for product name and version number","category":"page"},{"location":"release-notes.html#[v0.3.0](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.3.0)","page":"Release notes","title":"v0.3.0","text":"","category":"section"},{"location":"release-notes.html#Added-4","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"New option to append log files\nAbility to restart interrupted download sessions","category":"page"},{"location":"release-notes.html#Changed-5","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Update log file format","category":"page"},{"location":"release-notes.html#[v0.2.2](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.2.2)","page":"Release notes","title":"v0.2.2","text":"","category":"section"},{"location":"release-notes.html#Added-5","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"New flag to suppress downloads in a run","category":"page"},{"location":"release-notes.html#Fixed","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Fix corrupted Project.toml","category":"page"},{"location":"release-notes.html#[v0.2.1](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.2.1)","page":"Release notes","title":"v0.2.1","text":"","category":"section"},{"location":"release-notes.html#Added-6","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"New option none to remove no displaced files","category":"page"},{"location":"release-notes.html#[v0.2.0](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.2.0)","page":"Release notes","title":"v0.2.0","text":"","category":"section"},{"location":"release-notes.html#Added-7","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Option to warn and clean data folders of alien files","category":"page"},{"location":"release-notes.html#Changed-6","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Revised FTP connection and download of files","category":"page"},{"location":"release-notes.html#[v0.1.2](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.1.2)","page":"Release notes","title":"v0.1.2","text":"","category":"section"},{"location":"release-notes.html#Added-8","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Add Logging as dependency","category":"page"},{"location":"release-notes.html#[v0.1.1](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.1.1)","page":"Release notes","title":"v0.1.1","text":"","category":"section"},{"location":"release-notes.html#Added-9","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Improved error handling\nImproved README","category":"page"},{"location":"release-notes.html#Changed-7","page":"Release notes","title":"Changed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Add leading slash to caliopdir to generate absolute paths with joinpath","category":"page"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"rather than relative paths","category":"page"},{"location":"release-notes.html#Fixed-2","page":"Release notes","title":"Fixed","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Reconnect to ICARE and create a new FTP object for every subfolder to","category":"page"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"prevent LibCurl error 9","category":"page"},{"location":"release-notes.html#[v0.1.0](https://github.com/LIM-AeroCloud/ICARE.jl/releases/tag/v0.1.0)","page":"Release notes","title":"v0.1.0","text":"","category":"section"},{"location":"release-notes.html#Added-10","page":"Release notes","title":"Added","text":"","category":"section"},{"location":"release-notes.html","page":"Release notes","title":"Release notes","text":"Initial download routine using FTPClient","category":"page"},{"location":"adaptation.html#Adapting-the-package","page":"Adaptation","title":"Adapting the package","text":"","category":"section"},{"location":"adaptation.html#Intended-use","page":"Adaptation","title":"Intended use","text":"","category":"section"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"The package is written to synchronise CALIOP data from the AERIS/ICARE server a local system. Data is in the format:","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"<root>/<product>.v<Major>.<Minor>/yyyy/yyyy_mm_dd","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"The product version consists of a single-digit major and double-digit minor version. HDF4 data files (.hdf) are located in the date folders at the lowest level. The can be converted to HDF5 format (.h5). All this functionality can be achieved with the sftp_download function.","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"warning: Important notice\nAll adaptations described here should work in theory, but have never been tested in reality. If you encounter problems and find a workaround for it, consider a PR with a documentation update. If you have troubles, finding a solution or workaround, feel free to open a new issue.","category":"page"},{"location":"adaptation.html#Use-different-products-with-the-same-format","page":"Adaptation","title":"Use different products with the same format","text":"","category":"section"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"The AERIS/ICARE data server holds other products with the same structure; sftp_download can be directly used to download this data, by changing the remoteroot keyword argument to the new root path and supplying the correct product argument. If the data files are not in HDF4 format or and upgrade to HDF5 is not desired, switch the convert keyword argument to false.","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"Some products have different version formats, but the same folder structure. For these products, you need to set the version keyword argument to nothing and give the complete folder name (product name and version number) to the third positional product argument. Any products without the above folder structure cannot be synchronised with this package.","category":"page"},{"location":"adaptation.html#Converting-to-other-file-formats","page":"Adaptation","title":"Converting to other file formats","text":"","category":"section"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"If you prefer to convert the downloaded files to another file format, you can write your own conversion routine and overload the routines of the ICARE.jl package. You need the following routines with the given signature (function names, argument types and return types must match):","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"newext()::String returns the file extension including the leading dot for the converted format, e.g. \".h5\" for the default conversion\nconvert_file(input::String, output::String)::Nothing converts the input file to the output format; both input and output may be absolute or relative paths to the respective files","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"In your script import (or use) the ICARE package, overload the above functions (don't forget to prepend each function name with ICARE. as both functions are unexported) and call the sftp_download function. An example script can look like this:","category":"page"},{"location":"adaptation.html","page":"Adaptation","title":"Adaptation","text":"using ICARE\n\nICARE.newext() = \".newext\"\n\nfunction ICARE.convert_file(input::String, output::String)\n    # Convert path/to/input.ext > path/to/output.newext here\n    return\nend\n\nsftp_download(\"user\", \"password\", \"product\", 20200220)","category":"page"},{"location":"download.html#Downloading-from-the-ICARE-server","page":"Download","title":"Downloading from the ICARE server","text":"","category":"section"},{"location":"download.html#Synchronising-folder-structure","page":"Download","title":"Synchronising folder structure","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"ICARE.jl is meant for data that is arranged by years and dates with the following structure:","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"<root>/<product folder>/yyyy/yyyy_mm_dd","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"This folder structure is synchronised with the local system and data files are downloaded to the date folders at the lowest level. To minimize server communication and speed up download processes, a local .inventory.yaml file (hidden on Linux and MacOs) is created in the product folder. The .inventory.yaml contains information about the folder structure and file stats and should not be edited or deleted. The inventory is created before the first download of a given product. This process takes several minutes up to hours in extreme cases. After the initial setup, only dates outside the known date range are updated, which is much faster, unless a complete resynchronisation is forced.","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"warning: Important Notice\nDon't edit or delete the .inventory.yaml file in each main product folder unless you know what you are doing! The creation or resynchronisation of the inventory takes several minutes or up to hours in extreme cases.","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"note: Note\nInventories may not be nested, i.e. a product folder may not be inside another product folder.","category":"page"},{"location":"download.html#Downloading-data-files","page":"Download","title":"Downloading data files","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"Use the sftp_download function to synchronise the AERIS/ICARE server with the local system. Mandatory arguments are the ICARE user credentials, the product, and the date span. Further fine-tuning of the downloads is possible with keyword arguments as described in the sftp_download help.","category":"page"},{"location":"download.html#ICARE.sftp_download","page":"Download","title":"ICARE.sftp_download","text":"sftp_download(\n    user::String,\n    password::String,\n    product::String,\n    startdate::Int,\n    enddate::Int=-1;\n    version::Union{Nothing,Real} = 4.51,\n    remoteroot::String = \"/SPACEBORNE/CALIOP/\",\n    localroot::String = \".\",\n    convert::Bool = true,\n    resync::Bool = false,\n    update::Bool = false,\n    logfile::String = \"downloads.log\",\n    loglevel::Symbol = :Debug\n\n)\n\nDownload satellite data from the Aeris/ICARE server.\n\nnote: Note\nTo use sftp_download, an Aeris/ICARE account is needed that is available for free for non-commercial use.\n\nPositional arguments\n\nuser::String/password::String: Aeris/ICARE account credentials\nproduct::String: The desired product to download (matches the folder name excluding the version number, e.g., 05kmCPro)\nstartdate::Int/enddate::Int: The start/end date for the download period as Int (format: yyyy[mm[dd]]);\n\nIn the dates, the day and month part can be omitted. In this case, the earliest possible start date is selected and the latest possible end date, e.g. 202003 will give a start date of 2020-03-01 and an end date of 2020-03-31. The end date is optional, if omitted, the period defined by startdate is downloaded, either a day, or a month (if the day part is omitted) or a year (if both day and month are omitted).\n\nKeyword arguments\n\nversion::Union{Nothing,Real}: The version number of the product (default: 4.51).\nremoteroot::String: The root path on the remote server (default: \"/SPACEBORNE/CALIOP/\").\nlocalroot::String: The root path on the local machine containing the product folder (default: \".\").\nconvert::Bool: Whether or not to convert the downloaded files to another file format (default: true).\nresync::Bool: Whether to re-synchronize the local inventory with the remote server (default: false).\nupdate::Bool: Whether to update the local files if newer versions are available on the remote server (default: false).\nlogfile::String: The name of the log file (default: \"downloads.log\"; the name will be appended by the current date and time).\nloglevel::Symbol: The log level for the download process (default: :Debug).\n\nwarning: Warning\nThe update option automatically resynchronises the inventory as well.Re-synchronisation of the inventory will take several minutes up to hours!\n\nFor custom version formats, the version can be set to nothing and included in the product string. By default, the product folder is constructed as <product>.v<X.XX> with the version as float with two decimal places independent of the input format.\n\nBy default, hdf files (version 4) are assumed as download source, which will be converted to .h5 (HDF5) file unless convert is set to false.\n\n\n\n\n\n","category":"function"},{"location":"download.html#Specifying-the-download-product","page":"Download","title":"Specifying the download product","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"By default, CALIOP data (/SPACEBORNE/CALIOP) will be downloaded, but can be changed with the remoteroot keyword argument. Data will be downloaded to the current folder or the folder specified by localroot. Use the third positional argument to specify the product, you want to download. Products are assumed in the format <name>.v.<X.XX>, where X.XX is the version number with a two-digit minor version. By default, version 4.51 is assumed, but can be changed with the version keyword argument (e.g., upgrade to version 5 with version=5).","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"note: Note\nCurrently, the newest version 5 shows a significant performance decrease on the server side. Therefore, version 4.51 was chosen as the current default.","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"For custom formats, version can be set to nothing and the entire name and version string passed to the product argument.","category":"page"},{"location":"download.html#Specifying-a-date-range","page":"Download","title":"Specifying a date range","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"For convenience, dates are given as integers, so users don't have to import the Dates package. You can either give one date range as fourth positional argument or a start and end date as fourth and fifth positional argument.","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"The date format is yyyy[mm[dd]], where the day and/or month part can be omitted. Defining a span is possible for:","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"a whole year (yyyy)\na whole month (yyyymm)\na day (yyyymmdd)","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"If the the day and/or month are omitted in the start or end date, they will be filled with the  earliest possible day for the startdate and the latest possible date for the enddate. ","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"Some examples are:","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"20220212: Download the whole day of 2022-02-12\n202004: Download the whole April of 2020\n2020: Download the whole year 2020\n2002, 200206: Download the first half of 2002\n200207, 2002: Download the second half of 2002\n200003, 20000315: Download the first half of March 2000\n20000316, 200003: Download the second half of March 2000","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"Only complete days can be downloaded.","category":"page"},{"location":"download.html#Updating-the-inventory","page":"Download","title":"Updating the inventory","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"As mentioned before, updating the entire inventory including the parts already synced may take a long time and should not be necessary under normal circumstances. It can be achieved by setting resync to true.","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"If you want to check for updated data files on the server, you can set the update flag to true. This will also resync the complete inventory and, hence, take a long time to finish. If update is set, any newer file on the server compared to the modified time on the local system will be downloaded.","category":"page"},{"location":"download.html#Logging","page":"Download","title":"Logging","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"Some basic information about the current download session is printed to the screen with further comprehensive information in a log file. By default, log files are saved to the product folder as download_<timestamp>.log. You can change the file name with the logfile keyword argument. The file name will automatically be appended with the time stamp, when the download session started. If the file name includes a path, the logfile will be saved to this path. The path can be absolute or relative to your current location (where you started your julia session or where you change to during your julia session), i.e. logfile = \"~/icare.log\" will create a logfile icare_<timeestamp>.log in your root directory. Note that the extension can be change as well to, e.g., .txt or .dat.","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"For the log file the verbosity can be set to 4 levels given as Symbol (with verbosity listed from least to most):","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"Error\nWarn\nInfo\nDebug","category":"page"},{"location":"download.html","page":"Download","title":"Download","text":"By default, all messages are printed allowing you to track the download status on screen and in the log file. The Debug level is used to inform about completed downloads.","category":"page"},{"location":"download.html#Converting-data-files","page":"Download","title":"Converting data files","text":"","category":"section"},{"location":"download.html","page":"Download","title":"Download","text":"Routines related to file conversion without download from the AERIS/ICARE server are currently being refactored. They may or may not work at current.","category":"page"},{"location":"download.html#ICARE.hdfupgrade","page":"Download","title":"ICARE.hdfupgrade","text":"hdfupgrade(\n    product::String,\n    version::Float64 = 4.51;\n    localroot::String = \".\",\n    remoteroot::String = \"/SPACEBORNE/CALIOP\",\n    user::String = \"\",\n    password::String = \"\",\n    clean::Bool = false,\n    h4ext::String = \".hdf\",\n    h5ext::String = \".h5\",\n    logfile::String = \"conversions.log\",\n    loglevel::Symbol = :Debug\n)\n\nConvert all HDF4 data files to HDF5 files (with h4ext/h5ext file extensions, respectively) that are part of specified product in the given version.\n\nTo check, whether hdf files are part of the product, the are compared to the inventory file in the product folder in the localroot. Additional checks against the ICARE server can be performed with a significant increase in processing time, if the ICARE user name and password are given as well as the remoteroot of the product folder on the server.\n\nBy default, files are upgraded to HDF5 standard and original files are kept. If clean is set to true, the original files are deleted upon confirmation. This means that data files will have to be re-downloaded, if data files in the original HDF4 format are needed!\n\nEvents of the desired loglevel will be logged to logfile. A timestamp will be added to each logfile so that a unique logfile is created for every run and logfiles are not overwritten.\n\n\n\n\n\n","category":"function"},{"location":"index.html#ICARE.jl","page":"Home","title":"ICARE.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: ICARE logo)","category":"page"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ICARE.jl provides a secure ftp connection to the ICARE Data and Services Centre to download available satellite data. The package is intended for CALIOP data, but was written in a generic way that should allow downloads of any data with a folder structure:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<root path>/<main product folder>/yyyy/yyyy_mm_dd","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Furthermore, ICARE.jl allows the upgrade of HDF4 file format used in the ICARE database to HDF5 or any user defined conversions. Parallel downloads are possible by starting julia with multiple threads:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia --threads auto","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Or with the short form:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia -t auto","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"auto will give all available threads on the current system, but depending on the internet connection, fewer threads may be desired. In this case, give the number of threads instead of auto.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"note: Note\nTo use the package, a user account at the AERIS/ICARE Data Centre is needed, which is available free of charge for scientific, non-commercial use.","category":"page"},{"location":"index.html#License","page":"Home","title":"License","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ICARE.jl is free to use under the Gnu General Public License. However, binaries included for the HDF4 to HDF5 file conversion are available under the szip license for non-commercial, scientific use only.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ICARE.jl is an unregistered Julia package, but can be installed with the package manager. Start the package manager by typing ] in the REPL and add _ICARE.jl__ with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"add https://github.com/LIM-AeroCloud/ICARE.jl.git","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"By default, the development version will be installed. To use released stable versions switch to the main channel by installing ICARE.jl with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"add https://github.com/LIM-AeroCloud/ICARE.jl.git#main","category":"page"},{"location":"index.html#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"download.md\",\n    \"adaptation.md\",\n    \"release-notes.md\",\n    \"register.md\"\n]","category":"page"},{"location":"register.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"register.html","page":"Index","title":"Index","text":"","category":"page"}]
}
